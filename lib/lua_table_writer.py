import traceback


class LuaTableWriter():
    def __init__(self, f):
        self.fh = open(f, "w")
        self.indent = 0
        self.new_line = True
        self.value_written = False

    def close(self):
        self.fh.close()

    def write_document_start(self):
        assert(self.indent == 0)
        self.fh.write(
            "-- Autogenerated by Elona_foobar export plugin for Tiled.\n-- All changes made will be lost when reexporting.\n\n")

    def write_document_end(self):
        assert(self.indent == 0)
        self.fh.write("\n")

    def __enter__(self):
        self.write_document_start()
        self.write_return_table_start()
        return self

    def __exit__(self, exc_type, exc_value, tb):
        if exc_type is not None:
            traceback.print_exception(exc_type, exc_value, tb)
        self.write_table_end()
        self.write_document_end()
        self.close()

    def write_bare_table_start(self):
        self.prepare_new_line()
        self.fh.write("{ ")
        self.indent += 1
        self.new_line = True
        self.value_written = False

    def write_bare_table_end(self):
        assert(self.indent > 0)
        self.indent -= 1
        self.fh.write(" }")
        self.new_line = False
        self.value_written = True

    def write_table_start(self, name):
        self.prepare_new_line()
        self.fh.write(name + " = {")
        self.indent += 1
        self.new_line = False
        self.value_written = False

    def write_return_table_start(self):
        self.prepare_new_line()
        self.fh.write("return {")
        self.indent += 1
        self.new_line = False
        self.value_written = False

    def write_table_end(self):
        assert(self.indent > 0)
        self.indent -= 1
        if self.value_written:
            self.write_newline()
        self.fh.write("}")
        self.new_line = False
        self.value_written = True

    def write_value(self, value):
        self.prepare_new_value()
        self.fh.write("\"")
        self.fh.write(value)
        self.fh.write("\"")
        self.new_line = False
        self.value_written = True

    def write_unquoted_value(self, value):
        self.prepare_new_value()
        self.fh.write(value)
        self.new_line = False
        self.value_written = True

    def write_key_and_value(self, key, value):
        self.prepare_new_value()
        self.fh.write(key)
        self.fh.write(" = \"")
        self.fh.write(value)
        self.fh.write("\"")
        self.new_line = False
        self.value_written = True

    def write_key_and_unquoted_value(self, key, value):
        self.prepare_new_value()
        self.fh.write(key)
        self.fh.write(" = ")
        self.fh.write(value)
        self.new_line = False
        self.value_written = True

    def prepare_new_line(self):
        if self.value_written:
            self.write_separator()
            self.value_written = False
        self.write_newline()

    def prepare_new_value(self):
        if not self.value_written:
            self.write_newline()
        else:
            self.write_separator()
            self.fh.write(" ")

    def write_indent(self):
        for i in range(self.indent):
            self.fh.write(" ")

    def write_separator(self):
        self.fh.write(",")

    def write_newline(self):
        if not self.new_line:
            self.fh.write("\n")
            self.write_indent()
        self.new_line = True
